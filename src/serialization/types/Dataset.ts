/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Cohere from "../../api";
import * as core from "../../core";

export const Dataset: core.serialization.ObjectSchema<serializers.Dataset.Raw, Cohere.Dataset> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        name: core.serialization.string().optional(),
        createdAt: core.serialization.date().optional(),
        updatedAt: core.serialization.date().optional(),
        datasetType: core.serialization.string().optional(),
        validationStatus: core.serialization.string().optional(),
        validationError: core.serialization.string().optional(),
        schema: core.serialization.string().optional(),
        requiredFields: core.serialization.list(core.serialization.string()).optional(),
        preserveFields: core.serialization.list(core.serialization.string()).optional(),
        datasetParts: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("..")).DatasetPart))
            .optional(),
        validationWarnings: core.serialization.list(core.serialization.string()).optional(),
    });

export declare namespace Dataset {
    interface Raw {
        id?: string | null;
        name?: string | null;
        createdAt?: string | null;
        updatedAt?: string | null;
        datasetType?: string | null;
        validationStatus?: string | null;
        validationError?: string | null;
        schema?: string | null;
        requiredFields?: string[] | null;
        preserveFields?: string[] | null;
        datasetParts?: serializers.DatasetPart.Raw[] | null;
        validationWarnings?: string[] | null;
    }
}
