/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Cohere from "../../api";
import * as core from "../../core";

export const EmbedJob: core.serialization.ObjectSchema<serializers.EmbedJob.Raw, Cohere.EmbedJob> =
    core.serialization.object({
        jobId: core.serialization.property("job_id", core.serialization.string()),
        name: core.serialization.string().optional(),
        status: core.serialization.lazy(async () => (await import("..")).EmbedJobStatus),
        createdAt: core.serialization.property("created_at", core.serialization.date()),
        inputDatasetId: core.serialization.property("input_dataset_id", core.serialization.string()),
        outputDatasetId: core.serialization.property("output_dataset_id", core.serialization.string().optional()),
        model: core.serialization.string(),
        truncate: core.serialization.lazy(async () => (await import("..")).EmbedJobTruncate),
        meta: core.serialization.lazyObject(async () => (await import("..")).ApiMeta).optional(),
    });

export declare namespace EmbedJob {
    interface Raw {
        job_id: string;
        name?: string | null;
        status: serializers.EmbedJobStatus.Raw;
        created_at: string;
        input_dataset_id: string;
        output_dataset_id?: string | null;
        model: string;
        truncate: serializers.EmbedJobTruncate.Raw;
        meta?: serializers.ApiMeta.Raw | null;
    }
}
