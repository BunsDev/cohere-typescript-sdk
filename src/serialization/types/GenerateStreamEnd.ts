/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Cohere from "../../api";
import * as core from "../../core";

export const GenerateStreamEnd: core.serialization.ObjectSchema<
    serializers.GenerateStreamEnd.Raw,
    Cohere.GenerateStreamEnd
> = core.serialization
    .object({
        isFinished: core.serialization.property("is_finished", core.serialization.boolean()),
        finishReason: core.serialization.property(
            "finish_reason",
            core.serialization.lazy(async () => (await import("..")).FinishReason).optional()
        ),
        response: core.serialization.lazyObject(async () => (await import("..")).GenerateStreamEndResponse),
    })
    .extend(core.serialization.lazyObject(async () => (await import("..")).GenerateStreamEvent));

export declare namespace GenerateStreamEnd {
    interface Raw extends serializers.GenerateStreamEvent.Raw {
        is_finished: boolean;
        finish_reason?: serializers.FinishReason.Raw | null;
        response: serializers.GenerateStreamEndResponse.Raw;
    }
}
